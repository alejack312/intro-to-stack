import {SignIn, SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Image from "next/image";

import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import type  { RouterOutputs } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  //Get user info
  const {user} = useUser();


  console.log(user);

  //If no user, return null for now
  if(!user) return null;


  //By this point we should have a user because we checked above
  return (
    <div className="flex w-full gap-4">
      <Image 
        src={user.profileImageUrl} 
        alt="Profile image" 
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
      />
      <input 
        placeholder="Write something here!"
        className="grow bg-transparent"
      />
    </div>
  );
};

/*
Create another component for displaying posts on the feed.

Do not create new files for components until you KNOW you are going to need them
somewhere else.

Cool feature of tRPC: Rather than having to define the type for what the component takes,
we have the type from whatever getAll returns (look below). In the api, we have the helpers defined
We can make a type called PostWithUser and set it equal to RouterOutputs
*/
type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const {post, author} = props;

  return (
    <div key={post.id} className="flex  border-b border-slate-400 p-4 gap-3">
        <Image 
          src={author.profileImageUrl}
          alt={`@${author.username}'s profile picture`} 
          className="h-14 w-14 rounded-full"
          width={56}
          height={56}
        />
        <div className="flex flex-col">
          <div className="flex gap-1 text-slate-300">
            <span> {`@${author.username}`} </span> 
            <span className="font-thin"> 
              {` Â· ${dayjs(post.createdAt).fromNow()}`} 
            </span>
          </div>
            <span>
              {post.content}
            </span>
        </div>
    </div>
  )

}

export default function Home() {

  const user = useUser();

  /*
  Can bring us to the backend code from the frontend

  Two different files, run in two different places. One runs on the user's
  device. The other runs on our servers. We can go back and forth between the
  two like they are on the same machine.
  */
  const {data, isLoading} = api.posts.getAll.useQuery();
  
  if (isLoading) return <div>Loading...</div>;

  if(!data) return <div>Something went wrong</div>;
  
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!user.isSignedIn && (
              <div className="flex justify-center"> 
                <SignInButton/> 
              </div>
            )}

            {user.isSignedIn && <CreatePostWizard/>}
          </div>
          <div className="flex flex-col">
            {/*Keys are a way that react uses to identify what should or shouldn't 
            be updated. Keep amount of time to render down slightly */}
            {data?.map((fullPost) => (
              <PostView {...fullPost} key={fullPost.post.id}/>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
